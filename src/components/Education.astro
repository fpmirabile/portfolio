---
export interface Certification {
  name: string;
  issuer: string;
  type: string;
  year: string;
}

export interface EducationTexts {
  educationTitle: string;
  educationDesc: string;
  academicTitle: string;
  certificationsTitle: string;
}

export interface Props {
  texts: EducationTexts;
  certifications: Certification[];
}

const { texts, certifications } = Astro.props;
---

<section class="py-20">
  <div class="max-w-6xl mx-auto px-6">
    <div class="text-center mb-16 animate-fade-in-up">
      <h2
        class="text-3xl lg:text-4xl font-bold text-primary mb-4"
        id="educationTitle"
      >
        {texts.educationTitle}
      </h2>
      <p
        class="text-xl text-muted-foreground max-w-2xl mx-auto"
        id="educationDesc"
      >
        {texts.educationDesc}
      </p>
    </div>

    <div class="grid md:grid-cols-2 gap-8">
      <!-- Academic Education -->
      <div class="animate-fade-in-up">
        <h3
          class="text-xl font-semibold text-foreground mb-6"
          id="academicTitle"
        >
          {texts.academicTitle}
        </h3>
        <div class="bg-card border border-border rounded-xl p-6">
          <div class="flex items-start justify-between mb-4">
            <span
              class="px-2 py-1 bg-accent/10 text-accent rounded text-xs font-medium"
            >
              Bachelor's Degree
            </span>
            <span class="text-sm text-muted-foreground"
              >Graduated July 2024</span
            >
          </div>

          <h4 class="text-lg font-semibold text-card-foreground mb-2">
            Informatics Engineering
          </h4>

          <div class="flex items-center gap-2 text-muted-foreground">
            <span class="font-medium"
              >Universidad de la Empresa Argentina (UADE)</span
            >
            <span>â€¢</span>
            <span class="text-sm">Buenos Aires</span>
          </div>
        </div>
      </div>

      <!-- Certifications Carousel -->
      <div class="animate-fade-in-up animate-delay-100">
        <h3
          class="text-xl font-semibold text-foreground mb-6"
          id="certificationsTitle"
        >
          {texts.certificationsTitle}
        </h3>
        <div
          class="relative bg-card border border-border rounded-xl p-6 h-[200px] overflow-hidden"
        >
          <!-- Carousel Content -->
          <div class="absolute inset-6 flex items-center justify-center">
            <div class="text-center animate-fade-in" id="currentCertification">
              <!-- Current certification will be populated by JavaScript -->
            </div>
          </div>

          <!-- Carousel Indicators -->
          <div
            class="absolute bottom-3 left-1/2 transform -translate-x-1/2 flex gap-2"
            id="certificationIndicators"
          >
            <!-- Indicators will be populated by JavaScript -->
          </div>

          <!-- Navigation Arrows -->
          <button
            id="prevCertBtn"
            class="absolute left-2 top-1/2 transform -translate-y-1/2 p-1 text-muted-foreground hover:text-foreground transition-colors"
            aria-label="Previous certification"
          >
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>

          <button
            id="nextCertBtn"
            class="absolute right-2 top-1/2 transform -translate-y-1/2 p-1 text-muted-foreground hover:text-foreground transition-colors"
            aria-label="Next certification"
          >
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>

        <div class="mt-4 text-center">
          <p class="text-xs text-muted-foreground" id="certificationCounter">
            <!-- Counter will be populated by JavaScript -->
          </p>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ certifications }}>
  document.addEventListener("DOMContentLoaded", () => {
    let currentCertIndex = 0;
    let certificationInterval;

    function updateCurrentCertification() {
      const cert = certifications[currentCertIndex];
      const currentCert = document.getElementById("currentCertification");

      if (currentCert) {
        currentCert.innerHTML = `
          <div class="flex items-center justify-center mb-3">
            <span class="px-2 py-1 bg-secondary text-secondary-foreground rounded text-xs font-medium">
              ${cert.type}
            </span>
          </div>
          
          <h4 class="font-semibold text-card-foreground mb-2 text-sm leading-tight">
            ${cert.name}
          </h4>
          
          <p class="text-sm text-muted-foreground mb-2">
            ${cert.issuer}
          </p>
          
          <p class="text-xs text-accent">
            ${cert.year}
          </p>
        `;
      }
    }

    function renderCertificationIndicators() {
      const indicators = document.getElementById("certificationIndicators");
      if (indicators) {
        indicators.innerHTML = certifications
          .map(
            (_, i) => `
          <button 
            class="cert-indicator w-2 h-2 rounded-full transition-all duration-200 ${
              i === currentCertIndex ? "bg-accent" : "bg-muted-foreground/30"
            }" 
            data-index="${i}"
            aria-label="Go to certification ${i + 1}"
          ></button>
        `
          )
          .join("");

        // Add click listeners to indicators
        const indicatorButtons = indicators.querySelectorAll(".cert-indicator");
        indicatorButtons.forEach((button, index) => {
          button.addEventListener("click", () => {
            goToCertification(index);
          });
        });
      }
    }

    function updateCertificationCounter() {
      const counter = document.getElementById("certificationCounter");
      if (counter) {
        counter.textContent = `${currentCertIndex + 1} de ${certifications.length} certificaciones`;
      }
    }

    function nextCertification() {
      currentCertIndex = (currentCertIndex + 1) % certifications.length;
      updateCurrentCertification();
      renderCertificationIndicators();
      updateCertificationCounter();
    }

    function previousCertification() {
      currentCertIndex =
        currentCertIndex === 0
          ? certifications.length - 1
          : currentCertIndex - 1;
      updateCurrentCertification();
      renderCertificationIndicators();
      updateCertificationCounter();
    }

    function goToCertification(index) {
      currentCertIndex = index;
      updateCurrentCertification();
      renderCertificationIndicators();
      updateCertificationCounter();
    }

    function startCertificationCarousel() {
      certificationInterval = setInterval(() => {
        nextCertification();
      }, 4000);
    }

    // Initialize
    updateCurrentCertification();
    renderCertificationIndicators();
    updateCertificationCounter();
    startCertificationCarousel();

    // Navigation buttons
    const prevBtn = document.getElementById("prevCertBtn");
    const nextBtn = document.getElementById("nextCertBtn");

    prevBtn?.addEventListener("click", () => {
      clearInterval(certificationInterval);
      previousCertification();
      startCertificationCarousel();
    });

    nextBtn?.addEventListener("click", () => {
      clearInterval(certificationInterval);
      nextCertification();
      startCertificationCarousel();
    });

    // Pause carousel on hover
    const carousel = document.querySelector(".relative.bg-card");
    carousel?.addEventListener("mouseenter", () => {
      clearInterval(certificationInterval);
    });

    carousel?.addEventListener("mouseleave", () => {
      startCertificationCarousel();
    });
  });
</script>

---
import type { Technology } from "../../types";

export interface Props {
  technologies: Technology[];
  overlayTexts: {
    levelLabel: string;
    descriptionLabel: string;
    projectsLabel: string;
    closeButton: string;
    yearsText: string;
  };
  levels: {
    beginner: string;
    intermediate: string;
    advanced: string;
    expert: string;
  };
}

const { technologies, overlayTexts, levels } = Astro.props;
---

<div
  id="skillDemo"
  class="absolute inset-0 bg-card/95 backdrop-blur-md rounded-2xl items-center justify-center z-10 hidden p-6 border border-border"
>
  <div class="max-w-md w-full">
    <div class="text-center mb-6">
      <h4 class="text-2xl font-bold text-primary mb-1" id="activeSkill"></h4>
      <div class="text-sm text-muted-foreground" id="activeCategory"></div>
    </div>

    <div class="space-y-4 text-left">
      <div class="bg-secondary/50 rounded-lg p-3 border border-border">
        <div
          class="text-xs font-semibold text-muted-foreground uppercase mb-2"
          id="levelLabel"
        >
          {overlayTexts.levelLabel}
        </div>
        <div class="flex items-center gap-2">
          <span
            class="text-sm font-medium text-card-foreground"
            id="activeLevel"></span>
          <span class="text-xs text-muted-foreground">•</span>
          <span class="text-sm text-primary font-mono" id="activeYears"></span>
        </div>
      </div>

      <div class="bg-secondary/50 rounded-lg p-3 border border-border">
        <div
          class="text-xs font-semibold text-muted-foreground uppercase mb-2"
          id="descLabel"
        >
          {overlayTexts.descriptionLabel}
        </div>
        <p
          class="text-sm text-card-foreground leading-relaxed"
          id="activeDescription"
        >
        </p>
      </div>

      <div class="bg-secondary/50 rounded-lg p-3 border border-border">
        <div
          class="text-xs font-semibold text-muted-foreground uppercase mb-2"
          id="projectsLabel"
        >
          {overlayTexts.projectsLabel}
        </div>
        <ul class="space-y-2" id="activeProjects"></ul>
      </div>
    </div>

    <button
      id="closeDemo"
      class="mt-6 w-full py-2.5 px-4 bg-primary hover:bg-primary/90 text-primary-foreground rounded-lg transition-colors text-sm font-medium shadow-sm"
    >
      {overlayTexts.closeButton}
    </button>
  </div>
</div>

<script define:vars={{ technologies, overlayTexts, levels }}>
  document.addEventListener("DOMContentLoaded", () => {
    const techButtons = document.querySelectorAll(".tech-button");
    const closeButton = document.getElementById("closeDemo");

    techButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const skillName = button.getAttribute("data-skill");
        if (skillName) {
          const tech = technologies.find((t) => t.name === skillName);
          if (tech) {
            showSkillDemo(tech);
          }
        }
      });
    });

    if (closeButton) {
      closeButton.addEventListener("click", hideSkillDemo);
    }
  });

  function showSkillDemo(tech) {
    const demo = document.getElementById("skillDemo");
    const activeSkill = document.getElementById("activeSkill");
    const activeCategory = document.getElementById("activeCategory");
    const activeLevel = document.getElementById("activeLevel");
    const activeYears = document.getElementById("activeYears");
    const activeDescription = document.getElementById("activeDescription");
    const activeProjects = document.getElementById("activeProjects");

    if (activeSkill) activeSkill.textContent = tech.name;
    if (activeCategory) activeCategory.textContent = tech.category;
    if (activeLevel) {
      const levelKey = tech.level || "not specified";
      activeLevel.textContent = levels[levelKey] || levels.advanced;
    }
    if (activeYears)
      activeYears.textContent = `${tech.years} ${overlayTexts.yearsText}`;
    if (activeDescription)
      activeDescription.textContent =
        tech.description || "No description available";

    if (activeProjects && tech.projects) {
      activeProjects.innerHTML = tech.projects
        .map(
          (project) =>
            `<li class="text-sm text-card-foreground flex items-start gap-2"><span class="text-primary font-bold">→</span><span>${project}</span></li>`
        )
        .join("");
    }

    if (demo) {
      demo.classList.remove("hidden");
      demo.classList.add("flex");
    }
  }

  function hideSkillDemo() {
    const demo = document.getElementById("skillDemo");
    if (demo) {
      demo.classList.add("hidden");
      demo.classList.remove("flex");
    }
  }
</script>

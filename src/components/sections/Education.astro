---
import type { Certification, EducationTexts } from "../../types";
import CarouselButton from "../common/CarouselButton.astro";
import InfoCard from "../common/InfoCard.astro";

export interface Props {
  texts: EducationTexts;
  certifications: Certification[];
}

const { texts, certifications } = Astro.props;
---

<section class="py-20">
  <div class="max-w-6xl mx-auto px-6">
    <div class="text-center mb-16 animate-fade-in-up">
      <h2
        class="text-3xl lg:text-4xl font-bold text-primary mb-4"
        id="educationTitle"
      >
        {texts.educationTitle}
      </h2>
      <p
        class="text-xl text-muted-foreground max-w-2xl mx-auto"
        id="educationDesc"
      >
        {texts.educationDesc}
      </p>
    </div>

    <div class="grid md:grid-cols-2 gap-8">
      <!-- Academic Education -->
      <div class="animate-fade-in-up">
        <h3
          class="text-xl font-semibold text-foreground mb-6"
          id="academicTitle"
        >
          {texts.academicTitle}
        </h3>
        <div
          class="relative bg-card border border-border rounded-xl p-6 h-[200px] flex items-center justify-center"
        >
          <InfoCard
            badge={texts.degree.type}
            title={texts.degree.name}
            subtitle={texts.degree.institution}
            footer={texts.degree.graduationDate}
          />
        </div>
      </div>

      <!-- Certifications Carousel -->
      <div class="animate-fade-in-up animate-delay-100">
        <h3
          class="text-xl font-semibold text-foreground mb-6"
          id="certificationsTitle"
        >
          {texts.certificationsTitle}
        </h3>
        <div
          class="relative bg-card border border-border rounded-xl p-6 h-[200px] overflow-hidden"
          id="certificationCarousel"
        >
          <!-- Carousel Content -->
          <div class="absolute inset-6 flex items-center justify-center">
            <div id="currentCertification">
              <InfoCard
                badge={certifications[0].type}
                title={certifications[0].name}
                subtitle={certifications[0].issuer}
                footer={certifications[0].year}
                animate={true}
              />
            </div>
          </div>

          <!-- Carousel Indicators -->
          <div
            class="absolute bottom-3 left-1/2 transform -translate-x-1/2 flex gap-2"
            id="certificationIndicators"
          >
            <!-- Indicators will be populated by JavaScript -->
          </div>

          <!-- Navigation Arrows -->
          <CarouselButton direction="prev" id="prevCertBtn" />
          <CarouselButton direction="next" id="nextCertBtn" />
        </div>

        <div class="mt-4 text-center">
          <p class="text-xs text-muted-foreground" id="certificationCounter">
            1 de {certifications.length} certificaciones
          </p>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ certifications }}>
  document.addEventListener("DOMContentLoaded", () => {
    let currentIndex = 0;
    let intervalId = null;

    const currentCertElement = document.getElementById("currentCertification");
    const indicatorsContainer = document.getElementById(
      "certificationIndicators"
    );
    const counter = document.getElementById("certificationCounter");
    const carouselElement = document.getElementById("certificationCarousel");
    const prevBtn = document.getElementById("prevCertBtn");
    const nextBtn = document.getElementById("nextCertBtn");

    if (
      !currentCertElement ||
      !indicatorsContainer ||
      !counter ||
      !carouselElement
    ) {
      return;
    }

    // Render certification content
    function renderCertification(cert, animate = false) {
      const content = `
        <div class="flex items-center justify-center mb-3">
          <span class="px-2 py-1 bg-secondary text-secondary-foreground rounded text-xs font-medium">
            ${cert.type}
          </span>
        </div>
        
        <h4 class="font-semibold text-card-foreground mb-2 text-sm leading-tight">
          ${cert.name}
        </h4>
        
        <p class="text-sm text-muted-foreground mb-2">
          ${cert.issuer}
        </p>
        
        <p class="text-xs text-accent">
          ${cert.year}
        </p>
      `;

      if (animate) {
        currentCertElement.innerHTML = "";
        setTimeout(() => {
          currentCertElement.innerHTML = `<div class="text-center animate-fade-in">${content}</div>`;
        }, 10);
      } else {
        currentCertElement.innerHTML = `<div class="text-center">${content}</div>`;
      }
    }

    // Update counter
    function updateCounter() {
      counter.textContent = `${currentIndex + 1} de ${certifications.length} certificaciones`;
    }

    // Create indicators
    function createIndicators() {
      indicatorsContainer.innerHTML = certifications
        .map(
          (_, i) => `
          <button
            class="carousel-indicator w-2 h-2 rounded-full transition-all duration-200 ${
              i === currentIndex ? "bg-primary" : "bg-muted-foreground/30"
            }"
            data-index="${i}"
            aria-label="Go to item ${i + 1}"
          ></button>
        `
        )
        .join("");

      // Add click listeners to indicators
      const indicators = indicatorsContainer.querySelectorAll(
        ".carousel-indicator"
      );
      indicators.forEach((indicator) => {
        indicator.addEventListener("click", () => {
          const index = parseInt(indicator.getAttribute("data-index") || "0");
          goTo(index);
          restart();
        });
      });
    }

    // Update all elements
    function updateAll(animate = false) {
      renderCertification(certifications[currentIndex], animate);
      updateCounter();
      createIndicators();
    }

    // Navigation functions
    function next(animate = true) {
      currentIndex = (currentIndex + 1) % certifications.length;
      updateAll(animate);
    }

    function previous(animate = true) {
      currentIndex =
        currentIndex === 0 ? certifications.length - 1 : currentIndex - 1;
      updateAll(animate);
    }

    function goTo(index, animate = true) {
      if (index >= 0 && index < certifications.length) {
        currentIndex = index;
        updateAll(animate);
      }
    }

    function start() {
      stop();
      updateAll(false);
      if (certifications.length > 1) {
        intervalId = setInterval(() => next(true), 4000);
      }
    }

    function stop() {
      if (intervalId !== null) {
        clearInterval(intervalId);
        intervalId = null;
      }
    }

    function restart() {
      stop();
      start();
    }

    carouselElement.addEventListener("mouseenter", stop);
    carouselElement.addEventListener("mouseleave", start);
    if (prevBtn) {
      prevBtn.addEventListener("click", () => {
        previous(true);
        restart();
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener("click", () => {
        next(true);
        restart();
      });
    }

    start();
  });
</script>

---
import {
  Download,
  Github,
  Linkedin,
  Mail,
  Menu,
  Moon,
  Sun,
  X,
} from "lucide-astro";
import MenuItem from "../common/MenuItem.astro";
export interface MenuTexts {
  cvText: string;
  themeText: string;
  currentTheme: string;
}

export interface Props {
  texts: MenuTexts;
}

const { texts } = Astro.props;
---

<div class="fixed top-6 right-6 z-50">
  <!-- Menu Items -->
  <div id="menuItems" class="absolute top-16 right-0 space-y-3">
    <!-- CV Download -->
    <MenuItem
      as="button"
      id="cvButton"
      title={texts.cvText}
      subtitle="PDF Resume"
    >
      <Download class="w-4 h-4 text-primary" slot="icon" />
    </MenuItem>

    <!-- Email -->
    <MenuItem
      href="mailto:fpmirabile@gmail.com"
      title="Email"
      subtitle="fpmirabile@gmail.com"
    >
      <Mail class="w-4 h-4 text-primary" slot="icon" />
    </MenuItem>

    <!-- LinkedIn -->
    <MenuItem
      href="https://www.linkedin.com/in/fernando-pablo-mirabile-viola-85a64a52"
      target="_blank"
      title="LinkedIn"
    >
      <Linkedin class="w-4 h-4 text-primary" slot="icon" />
    </MenuItem>

    <!-- GitHub -->
    <MenuItem
      href="https://github.com/fpmirabile"
      target="_blank"
      title="GitHub"
    >
      <Github class="w-4 h-4 text-primary" slot="icon" />
    </MenuItem>

    <MenuItem
      as="button"
      id="themeButton"
      title={texts.themeText}
      subtitle={texts.currentTheme}
      titleId="themeText"
      subtitleId="currentTheme"
    >
      <Sun slot="icon" id="themeIconLight" class="w-4 h-4 text-primary" />
      <Moon
        slot="icon"
        id="themeIconDark"
        class="w-4 h-4 text-primary hidden"
      />
    </MenuItem>
  </div>

  <!-- Menu Toggle Button -->
  <button
    id="menuToggle"
    class="w-14 h-14 bg-accent text-accent-foreground rounded-full shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center"
    aria-label="Toggle menu"
  >
    <Menu id="menuIconOpen" class="w-6 h-6" />
    <X id="menuIconClose" class="w-6 h-6 hidden" />
  </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    let menuOpen = false;

    const menuToggle = document.getElementById("menuToggle");
    const menuItems = document.getElementById("menuItems");
    const menuIconOpen = document.getElementById("menuIconOpen");
    const menuIconClose = document.getElementById("menuIconClose");

    function closeMenu() {
      menuOpen = false;
      menuItems?.classList.remove("menu-open");
      menuIconOpen?.classList.remove("hidden");
      menuIconClose?.classList.add("hidden");
    }

    menuToggle?.addEventListener("click", (event) => {
      event.stopPropagation();
      menuOpen = !menuOpen;

      if (menuOpen) {
        menuItems?.classList.add("menu-open");
        menuIconOpen?.classList.add("hidden");
        menuIconClose?.classList.remove("hidden");
      } else {
        closeMenu();
      }
    });

    document.addEventListener("click", (event) => {
      if (
        menuOpen &&
        !menuItems?.contains(event.target as Node) &&
        !menuToggle?.contains(event.target as Node)
      ) {
        closeMenu();
      }
    });

    const cvButton = document.getElementById("cvButton");
    cvButton?.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent("downloadCV"));
    });

    const themeButton = document.getElementById("themeButton");
    const themeIconLight = document.getElementById("themeIconLight");
    const themeIconDark = document.getElementById("themeIconDark");

    const themeTexts = {
      es: { light: "Claro", dark: "Oscuro" },
      en: { light: "Light", dark: "Dark" },
      pt: { light: "Claro", dark: "Escuro" },
    };

    function applyTheme(isDark: boolean) {
      if (isDark) {
        themeIconLight?.classList.add("hidden");
        themeIconDark?.classList.remove("hidden");
      } else {
        themeIconLight?.classList.remove("hidden");
        themeIconDark?.classList.add("hidden");
      }
    }

    applyTheme(document.documentElement.classList.contains("dark"));

    function getCurrentLanguage() {
      const pathLang = window.location.pathname.split("/")[1];
      if (["es", "en", "pt"].includes(pathLang)) {
        return pathLang;
      }
      return localStorage.getItem("language") || "es";
    }

    const currentLang = getCurrentLanguage();
    const currentThemeEl = document.getElementById("currentTheme");

    document.addEventListener("themeChanged", (event) => {
      const { isDark } = (event as CustomEvent).detail;
      applyTheme(isDark);
      if (currentThemeEl) {
        const langKey = currentLang as keyof typeof themeTexts;
        currentThemeEl.innerText = isDark
          ? themeTexts[langKey].dark
          : themeTexts[langKey].light;
      }
    });

    themeButton?.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent("toggleTheme"));
    });
  });
</script>
